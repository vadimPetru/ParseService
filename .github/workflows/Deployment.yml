name: Deploy .NET Background Service

on:
  push:
    branches: [ "master" ]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
    - name: 📥 Клонирование репозитория
      uses: actions/checkout@v4

    - name: ⚙️ Установка .NET 8.0
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 8.0.x
        
    - name: 🛠️ Установка EF Core CLI 
      run: dotnet new tool-manifest && dotnet tool install dotnet-ef

    - name: 📦 Восстановление зависимостей
      run: dotnet restore

    - name: 🏗️ Сборка проекта
      run: dotnet build --no-restore --configuration Release

    - name: ✅ Запуск unit-тестов
      run: dotnet test --no-build --verbosity normal --configuration Release

    - name: 🚀 Публикация проекта
      run: dotnet publish -c Release -o publish
      
    - name: 📤 Очистка папки и копирование файлов на сервер
      run: |
        echo "📂 Проверка содержимого publish/"
        ls -la publish || echo "❌ Папка publish не найдена!"
        echo "❌ Очистка папки на сервере..."
        sshpass -p "${{ secrets.SSH_PASSWORD }}" ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} "rm -rf /var/www/myapp/*"
        echo "📤 Создание папки на сервере..."
        sshpass -p "${{ secrets.SSH_PASSWORD }}" ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} "mkdir -p /var/www/myapp/"
        echo "📤 Копирование файлов через SCP..."
        sshpass -p "${{ secrets.SSH_PASSWORD }}" scp -o StrictHostKeyChecking=no -r publish/* ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}:/var/www/myapp/

    - name: 🚀 Установка dotnet-ef на сервере
      uses: appleboy/ssh-action@v0.1.10
      with:
        host: ${{ secrets.SSH_HOST }}
        username: ${{ secrets.SSH_USER }}
        password: ${{ secrets.SSH_PASSWORD }}
        script: |
          echo "🛠️ Установка dotnet-ef..."
          dotnet tool install --global dotnet-ef
          export PATH="$PATH:/root/.dotnet/tools"  # Добавляем путь к dotnet-ef в PATH

    - name: 🔄 Деплой на сервер
      uses: appleboy/ssh-action@v0.1.10
      with:
        host: ${{ secrets.SSH_HOST }}
        username: ${{ secrets.SSH_USER }}
        password: ${{ secrets.SSH_PASSWORD }}
        script: |
          echo "🛠️ Остановка сервиса..."
          sudo systemctl stop myservice || true
    
          echo "📜 Настройка прав доступа..."
          sudo chmod -R 755 /var/www/myapp/
    
          echo "🔐 Создание файла secret.json..."
          sudo bash -c "cat > /var/www/myapp/secret.json <<EOF
          {
             \"MainOptions\": {
              \"TELEGRAM_TOKEN\": \"${{ secrets.TELEGRAM_TOKEN }}\",
              \"CHAT_ID\": \"${{ secrets.CHAT_ID }}\",
              \"MAIN_URL\": \"${{ secrets.MAIN_URL }}\"
              }
            
          }
          EOF"
        
          # Проверка на работоспособность сервиса
          echo "⏳ Ожидание старта сервиса..."
          sleep 10  # Даем время сервису на запуск
          echo "📊 Проверка статуса сервиса..."
          sudo systemctl is-active --quiet myservice && echo "✅ Сервис работает!" || echo "❌ Сервис не работает!"
          
    - name: 🚀 Выполнение миграций на сервере
      uses: appleboy/ssh-action@v0.1.10
      with:
        host: ${{ secrets.SSH_HOST }}
        username: ${{ secrets.SSH_USER }}
        password: ${{ secrets.SSH_PASSWORD }}
        script: |
          cd /var/www/myapp/
          export PATH="$PATH:/root/.dotnet/tools"  # Убедимся, что dotnet-ef доступен
          dotnet ef database update --project /var/www/myapp/ParseService.dll --configuration Release

    - name: Restart service
      uses: appleboy/ssh-action@v0.1.10
      with:
        host: ${{ secrets.SSH_HOST }}
        username: ${{ secrets.SSH_USER }}
        password: ${{ secrets.SSH_PASSWORD }}
        script: |
          echo "🚀 Перезапуск сервиса..."
          sudo systemctl restart myservice

    - name: ✅ Успешное завершение
      run: echo "✅ Деплой завершён успешно!"
